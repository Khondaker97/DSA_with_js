class DSU {
  constructor(size, components) {
    this.components = components || new Array(size).fill(-1);
  }
  //find the parent of the node
  find(node) {
    if (this.components[node] < 0) return node;
    return this.find(this.components[node]);
  }
  //through index
  union(node1, node2) {
    const parentNode1 = this.find(node1);
    const parentNode2 = this.find(node2);
    if (parentNode1 !== parentNode2) {
      const sizeOfNodeTwo = this.components[parentNode2];
      this.components[parentNode1] += sizeOfNodeTwo;
      this.components[parentNode2] = parentNode1;
    }
  }
}

function minimizeMalSpread(network, infected) {
  const networkSize = network.length;
  const networkDSU = new DSU(networkSize);
  //adding clean nodes to DSU
  for (let i = 0; i < networkSize; i++) {
    if (infected.indexOf(i) > -1) continue;
    //not infected conn
    const connections = network[i];
    for (let j = 0; j < connections.length; j++) {
      if (infected.indexOf(j) > -1) continue;
      if (connections[j]) {
        //clean network union
        networkDSU.union(i, j);
      }
    }
  }

  //add infected node 1 by 1
  const cleanState = networkDSU.components;
  let worstSize = 0,
    worstNode = null;
  for (let i = 0; i < infected.length; i++) {
    //isolation
    const freshDSU = new DSU(networkSize, cleanState);
    const infectedNode = infected[i];
    const connections = network[infectedNode];
    for (let j = 0; j < connections.length; j++) {
      //don't add conn between infected node
      if (infected.indexOf(j) > -1) continue;
      if (connections[j]) {
        //make the infected to conn each other edges
        freshDSU.union(infectedNode, j);
      }
    }
    //check the size of comp created from
    //adding in the infected node
    if (freshDSU.components[infectedNode] < worstSize) {
      worstNode = infectedNode;
    }
    worstSize = Math.min(worstSize, freshDSU.components[infectedNode]);
  }
  return worstNode;
}

console.log(
  minimizeMalSpread(
    [
      [0, 1, 0],
      [1, 0, 1],
      [0, 1, 0],
    ],
    [0, 1]
  )
);
